"""
Задание:
Найти подходящие данные для подобной задачи

1. Загрузить их в pandas.
2. Шкалировать для совместимости с ИНС.
3. Сравнить результат "до" и "после".
---------------------------------------------------------
Данные содержатся в файле data.xlsx
Данные составлены вручную с сайта https://perm.vseinstrumenti.ru/
Тема: электрические энергосберегающие лампы

Таблица содержит следующие колонки:
- № поз.
- Наименование
- Производитель
- Мощность, Вт
- Световой поток, Лм
- Длина, мм
- Диаметр, мм
- Цветопередача, Ra
- Срок службы, ч
- Цветовая температура, К
- Стоимость единицы, руб.
"""
import numpy as np
import pandas as pd
from sklearn import preprocessing

data = pd.ExcelFile("data.xlsx")
data_parse = data.parse('Лист1')
data_frame = pd.DataFrame(data_parse)

"""
Обучающий вектор примем колонку "Мощность, Вт"
В качестве данных:
- Световой поток, Лм
- Длина, мм
- Диаметр, мм
- Срок службы, ч
- Цветовая температура, К
- Стоимость единицы, руб.
P.S. Цветопередачу не стал брать, ибо значение почти везде одно и то же
"""

values = np.hstack((data_frame.values[2:, 4:7], data_frame.values[2:, 8:11]))
# Нормализуем данные по столбцам, используя библиотеку sklearn:
learn_array = preprocessing.normalize(values, axis=0, norm='max')
# Желаемый результат:
output_values = data_frame.values[2:, 3:4].flatten()


# Производим "обучение" нейрона по имеющимся данным:
w = np.zeros(len(learn_array[0]))

alfa = 0.2
betta = -0.4


def f(x):
    s = betta + np.sum(x @ w)
    return s


def train():
    global w
    w_copy = w.copy()
    for x, y in zip(learn_array, output_values):
        w += alfa * (y - f(x)) * x
    return (w != w_copy).any()


while train():
    pass


for i in range(len(learn_array)):
    if i == 0:
        print("Желаемое значение -> полученное значение: расхождение значений (в %)")
    r = round(f(learn_array[i]), 3)
    a = output_values[i]
    d = round(abs(a - r)*100/max(r, a), 2)
    print(f'{a} -> {r}: {d}%')

"""
Желаемое значение -> полученное значение: расхождение значений (в %)
15 -> 13.920: 7.2%
11 -> 11.769: 6.53%
20 -> 17.953: 10.24%
7  -> 7.085:  1.2%
15 -> 15.108: 0.71%
7  -> 6.267:  10.47%
13 -> 13.404: 3.01%
11 -> 10.780: 2.0%
13 -> 14.723: 11.7%
20 -> 18.207: 8.96%
5  -> 5.896:  15.2%
10 -> 10.667: 6.25%
8  -> 8.762:  8.7%
12 -> 12.288: 2.34%
10 -> 8.912:  10.88%
8  -> 6.061:  24.24%
12 -> 12.667: 5.27%
20 -> 20.006: 0.03%
15 -> 14.844: 1.04%
13 -> 12.011: 7.61%
13 -> 13.332: 2.49%
5  -> 5.933:  15.73%
8  -> 7.543:  5.71%
8  -> 7.544:  5.7%
20 -> 19.850: 0.75%
15 -> 13.255: 11.63%
15 -> 16.032: 6.44%
"""


# Протестируем наш нейрон, используя новые данные:
data_test = pd.ExcelFile("data_test.xlsx")
data_test_parse = data_test.parse('Лист1')
data_test_frame = pd.DataFrame(data_test_parse)

values_test = np.hstack((data_test_frame.values[2:, 4:7], data_test_frame.values[2:, 8:11]))
test_array = preprocessing.normalize(values_test, axis=0, norm='max')
output_values_test = data_test_frame.values[2:, 3:4].flatten()

for i in range(len(test_array)):
    if i == 0:
        print("Желаемое значение -> полученное значение: расхождение значений (в %)")
    r = round(f(test_array[i]), 3)
    a = output_values_test[i]
    d = round(abs(a - r)*100/max(r, a), 2)
    print(f'{a} -> {r}: {d}%')

"""
Желаемое значение -> полученное значение: расхождение значений (в %)
11 -> 15.595: 29.46%
7 -> 8.731: 19.83%
12 -> 18.678: 35.75%
10 -> 14.562: 31.33%
15 -> 18.972: 20.94%
"""


"""
ВЫВОД: 
По началу, когда нейрон "обучали", получалось не слишком большое расхождение по сравнению с тестируемыми 
данными. Причины таких больших расхождений: 
- недостаточное количество данных (для реальной картины нужны данные хотя 
  бы по 10-15 позиций на каждую мощность); 
- недостоверные данные в одном из показателе - цене (в связи с тем, 
  что сейчас в самом разгаре "черная пятница", цены на некоторые позиции могут значительно снижать);
- отсутствие какой-либо корреляции (зависимости) между характеристиками продукта;
- недостаточное количество характеристик продукта (в нашем случае использованы только 6 характеристик 
  продукта, по факту, их гораздо больше (вес, производитель, напряжение, вид, тип колбы, форма, 
  эквивалент лампы накаливания, угол рассеивания и пр.)
"""
